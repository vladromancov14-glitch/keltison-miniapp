const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();

let bot = null;

function init() {
  if (!process.env.TELEGRAM_BOT_TOKEN) {
    console.log('‚ö†Ô∏è Telegram bot token not provided');
    return null;
  }
  
  try {
    bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
    
    // Set webhook for WebApp
    if (process.env.WEBAPP_URL) {
      const webAppUrl = `${process.env.WEBAPP_URL}/webapp`;
      bot.setWebAppUrl(webAppUrl);
    }
    
    setupHandlers();
    console.log('‚úÖ Telegram bot initialized successfully');
    return bot;
  } catch (error) {
    console.error('‚ùå Failed to initialize Telegram bot:', error);
    return null;
  }
}

function setupHandlers() {
  // Start command
  bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    
    const welcomeMessage = `
üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ K–ÅLTISON, ${firstName}!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å —Ä–µ–º–æ–Ω—Ç–æ–º –≤–∞—à–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:
üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã
üíª –ù–æ—É—Ç–±—É–∫–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã  
üß∫ –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
üì∫ –¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã –∏ –º–æ–Ω–∏—Ç–æ—Ä—ã

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –ø–æ —Ä–µ–º–æ–Ω—Ç—É!
    `;
    
    const keyboard = {
      inline_keyboard: [[
        {
          text: 'üîß –û—Ç–∫—Ä—ã—Ç—å –ö–Å–õ–¢–ò–°–û–ù',
          web_app: { url: `${process.env.WEBAPP_URL || 'http://localhost:3000'}` }
        }
      ]]
    };
    
    bot.sendMessage(chatId, welcomeMessage, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });
  });
  
  // Help command
  bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    
    const helpMessage = `
üîß <b>K–ÅLTISON - –ú–∞—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –≤ –≤–∞—à–µ–º –∫–∞—Ä–º–∞–Ω–µ</b>

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ üìã –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É
‚Ä¢ üîç –ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π –ø–æ –º–∞—Ä–∫–µ –∏ –º–æ–¥–µ–ª–∏
‚Ä¢ üß∞ –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∑–∞–ø—á–∞—Å—Ç–µ–π
‚Ä¢ üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞
‚Ä¢ ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
‚Ä¢ üõí –°—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã –∑–∞–ø—á–∞—Å—Ç–µ–π

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å –ö–Å–õ–¢–ò–°–û–ù"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
3. –£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å
4. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É
5. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é!

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/webapp - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

üíé <b>PRO-–ø–æ–¥–ø–∏—Å–∫–∞</b> –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫:
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º –ò–ò
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º

–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @keltison_support
    `;
    
    const keyboard = {
      inline_keyboard: [
        [{
          text: 'üîß –û—Ç–∫—Ä—ã—Ç—å –ö–Å–õ–¢–ò–°–û–ù',
          web_app: { url: `${process.env.WEBAPP_URL || 'http://localhost:3000'}` }
        }],
        [{
          text: 'üíé PRO-–ø–æ–¥–ø–∏—Å–∫–∞',
          callback_data: 'pro_upgrade'
        }],
        [{
          text: 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
          url: 'https://t.me/keltison_support'
        }]
      ]
    };
    
    bot.sendMessage(chatId, helpMessage, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });
  });
  
  // WebApp command
  bot.onText(/\/webapp/, (msg) => {
    const chatId = msg.chat.id;
    
    const keyboard = {
      inline_keyboard: [[
        {
          text: 'üîß –û—Ç–∫—Ä—ã—Ç—å –ö–Å–õ–¢–ò–°–û–ù',
          web_app: { url: `${process.env.WEBAPP_URL || 'http://localhost:3000'}` }
        }
      ]]
    };
    
    bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å K–ÅLTISON:', {
      reply_markup: keyboard
    });
  });
  
  // Handle callback queries
  bot.on('callback_query', (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    
    switch (data) {
      case 'pro_upgrade':
        const proMessage = `
üíé <b>PRO-–ø–æ–¥–ø–∏—Å–∫–∞ K–ÅLTISON</b>

<b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>
‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å –≤–∏–¥–µ–æ
‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ò–ò-–º–∞—Å—Ç–µ—Ä–∞
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã
‚úÖ –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –∑–∞–ø—á–∞—Å—Ç–µ–π
‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 299‚ÇΩ/–º–µ—Å—è—Ü

<b>–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å:</b>
1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
2. –ù–∞–∂–º–∏—Ç–µ "üíé PRO-–ø–æ–¥–ø–∏—Å–∫–∞"
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º

<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ 7 –¥–Ω–µ–π!</b>
        `;
        
        const proKeyboard = {
          inline_keyboard: [
            [{
              text: 'üîß –û—Ç–∫—Ä—ã—Ç—å –ö–Å–õ–¢–ò–°–û–ù',
              web_app: { url: `${process.env.WEBAPP_URL || 'http://localhost:3000'}` }
            }],
            [{
              text: 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
              url: 'https://t.me/keltison_support'
            }]
          ]
        };
        
        bot.sendMessage(chatId, proMessage, {
          reply_markup: proKeyboard,
          parse_mode: 'HTML'
        });
        break;
    }
    
    bot.answerCallbackQuery(callbackQuery.id);
  });
  
  // Handle any other messages
  bot.on('message', (msg) => {
    if (msg.text && !msg.text.startsWith('/')) {
      const chatId = msg.chat.id;
      const firstName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      
      const responseMessage = `
–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã

–Ø –±–æ—Ç K–ÅLTISON - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Ç–µ—Ä –ø–æ —Ä–µ–º–æ–Ω—Ç—É —Ç–µ—Ö–Ω–∏–∫–∏.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º!
      `;
      
      const keyboard = {
        inline_keyboard: [[
          {
            text: 'üîß –û—Ç–∫—Ä—ã—Ç—å –ö–Å–õ–¢–ò–°–û–ù',
            web_app: { url: `${process.env.WEBAPP_URL || 'http://localhost:3000'}` }
          }
        ]]
      };
      
      bot.sendMessage(chatId, responseMessage, {
        reply_markup: keyboard
      });
    }
  });
  
  // Error handling
  bot.on('error', (error) => {
    console.error('Telegram bot error:', error);
  });
  
  bot.on('polling_error', (error) => {
    console.error('Telegram bot polling error:', error);
  });
}

// Send notification to user
async function sendNotification(telegramId, message, options = {}) {
  if (!bot) {
    console.log('Bot not initialized');
    return false;
  }
  
  try {
    await bot.sendMessage(telegramId, message, options);
    return true;
  } catch (error) {
    console.error('Failed to send notification:', error);
    return false;
  }
}

// Send WebApp button
async function sendWebAppButton(telegramId, text = '–û—Ç–∫—Ä—ã—Ç—å K–ÅLTISON') {
  if (!bot) {
    console.log('Bot not initialized');
    return false;
  }
  
  try {
    const keyboard = {
      inline_keyboard: [[
        {
          text: `üîß ${text}`,
          web_app: { url: `${process.env.WEBAPP_URL || 'http://localhost:3000'}` }
        }
      ]]
    };
    
    await bot.sendMessage(telegramId, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', {
      reply_markup: keyboard
    });
    
    return true;
  } catch (error) {
    console.error('Failed to send WebApp button:', error);
    return false;
  }
}

module.exports = {
  init,
  sendNotification,
  sendWebAppButton,
  getBot: () => bot
};
